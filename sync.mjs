import chalk from 'chalk';
import { writeFile, readFile } from 'node:fs/promises';
import path from 'node:path';
import { compareVersions } from 'compare-versions';
import { N8NPropertiesBuilder } from '@devlikeapro/n8n-openapi-node';

const OPENAPI_URL = new URL('https://app.reflag.com/openapi.json');
const GEN_PATH = path.join(process.cwd(), 'nodes', 'Reflag', 'gen');
const PACKAGE_JSON_PATH = path.join(process.cwd(), 'package.json');

export default async function sync(force = false) {
  try {
    console.log(chalk.green('Syncing Reflag OpenAPI spec'));
    const response = await fetch(OPENAPI_URL, {
      method: 'GET',
    });

    const spec = await response.json();
    const version = spec.info.version;

    const packageJson = JSON.parse(await readFile(PACKAGE_JSON_PATH, 'utf-8'));
    const isNewVersion = compareVersions(version, packageJson.version) === 1;

    if (isNewVersion || force) {
      console.log(
        chalk.green(`Updating package.json version from '${packageJson.version}' to '${version}'`),
      );
      await writeFile(
        PACKAGE_JSON_PATH,
        JSON.stringify(
          {
            ...packageJson,
            version,
          },
          null,
          2,
        ),
      );

      console.log(chalk.green('Writing OpenAPI spec to gen/openapi.json'));
      await writeFile(path.join(GEN_PATH, 'openapi.json'), JSON.stringify(spec, null, 2));

      console.log(chalk.green('Generating properties from OpenAPI spec to gen/properties.ts'));
      const parser = new N8NPropertiesBuilder(spec, {});
      const properties = parser.build();
      await writeFile(
        path.join(GEN_PATH, 'properties.ts'),
        [
          '/** This file is automatically generated by the sync script. Do not edit it manually. */',
          "import { INodeProperties } from 'n8n-workflow';",
          '',
          `export const properties: INodeProperties[] = ${JSON.stringify(properties, null, 2)};`,
        ].join('\n'),
      );
    } else {
      console.log(
        chalk.cyan(
          `Package.json version '${packageJson.version}' is the same or newer than the OpenAPI spec version. Skipping sync.`,
        ),
      );
    }
  } catch (error) {
    console.error(chalk.red('Error syncing Reflag OpenAPI spec and package.json version'));
    console.error(error);
  }
}

sync(process.argv.includes('--force'));
